/* -*-c-*- 
   FreeBSD like config file
   See example.conf for explanation of syntax 
 
   TSeq(Class=RI%gcd=<6)
   T1(DF=Y%W=403D|C0B7%ACK=S++%Flags=AS%Ops=MNWNNT)
   T2(Resp=N)
   T3(Resp=Y%DF=Y%W=403D|C0B7%ACK=S++%Flags=AS|A%Ops=MNWNNT|NNT)
   T4(DF=N%W=4000|0%ACK=O%Flags=R%Ops=)
   T5(DF=N%W=0%ACK=S++%Flags=AR%Ops=)
   T6(DF=N%W=0%ACK=O%Flags=R%Ops=)
   T7(DF=N%W=0%ACK=S%Flags=AR%Ops=)
   PU(TOS=0%IPLEN=38%RIPTL=148%RID=F%RIPCK=F%UCK=0%ULEN=134%DAT=E) 
*/

id "FreeBSD";

tcp {
  incoming yes;
  outgoing yes;
  max-window 0;
}

tcp_isn {
  type random-inc 65536;
  initial-value random;
}

ip_id {
  type fixed-inc 1;
  initial-value random;
}

tcp_options {
  keep-unused no;
  keep-unknown yes;
  isolated-packets yes;
  timestamp-scale 100;
  code { /* taken from real kernel code ;) */
    if (flags(syn)) {
      copy(mss);
      if (option(wscale)) {
	copy(nop);
	copy(wscale);
      }
    }
    if (option(timestamp) || !flags(rst|ack)) {
      copy(nop);
      copy(nop);
      copy(timestamp);
    }
    if (option(CC) || option(CC.NEW) || option(CC.ECHO)) { 
      if (!flags(rst)) {
	if (flags(syn&ack)) {
	  copy(nop);
	  copy(nop);
	  copy(CC);
	  if (option(CC.ECHO)) {
	    copy(nop);
	    copy(nop);
	    copy(CC.ECHO);
	  }
	} else {
	  if (flags(syn)) {
	    copy(nop);
	    copy(nop);
	    if (option(CC.NEW))
	      copy(CC.NEW);
	    else
	      copy(CC);
	  } else {
	    copy(nop);
	    copy(nop);
	    copy(CC);
	  }
	}
      }
    }
  }
}

tcp_decoy {
  code {
    if (option(mss)) { /* nmap has mss on all of its pkts */
      if (listen) {
	if (flags(syn&ece) || flags(syn&fin&urg&push)) { /* nmap test 1 or 3 */
	  set(df, 1);
	  set(win, 0x403D);
	  set(ack, this + 1);
	  set(flags, ack|syn);
	  insert(mss, this+1);
	  insert(timestamp);
	  copy(wscale);
	  reply;
	}
	if (flags(null)) /* nmap test 2 */
	  drop; 
	if (ack(0) && flags(ack) && !flags(syn|push|urg|rst)) { /* nmap test 4 */
	  set(df, 0);
	  set(win, 0x4000);
	  set(ack, 2);
	  set(flags, rst);
	  reply;
	}
      } else {
	set(df, 0);
	set(win, 0);
	if (flags(syn) && !flags(ack)) { /* nmap test 5 */
	  set(ack, this + 1);
	  set(flags, ack|rst);
	  reply;
	}
	if (ack(0) && flags(ack) && !flags(syn|push|urg|rst)) { /* nmap test 6 */
	  set(ack, 2);
	  set(flags, rst);
	  reply;
	}
	if (flags(fin&push&urg)) { /* nmap test 7 */
	  set(ack, this);
	  set(flags, ack|rst);
	  reply;
	}
      }
    }
  }
}

udp_unreach {
  reply yes;
  df no;
  max-len 0x38;
  tos 0;
  
  mangle-original {
    ip-len 0x148;
    ip-id mangle;
    ip-csum mangle;
    udp-len 0x134;
    udp-csum zero;
    udp-data same;
  }
}
