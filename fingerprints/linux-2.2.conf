/* -*-c-*-
   Linux 2.2.x like config file
   See example.conf for explanation of syntax

   TSeq(Class=RI%gcd=1%SI=30F2A3)
   T1(Resp=Y%DF=Y%W=7F53%ACK=S++%Flags=AS%Ops=MENNTNW)
   T2(Resp=N)
   T3(Resp=Y%DF=Y%W=7F53%ACK=S++%Flags=AS%Ops=MENNTNW)
   T4(Resp=Y%DF=N%W=0%ACK=O%Flags=R%Ops=)
   T5(Resp=Y%DF=N%W=0%ACK=S++%Flags=AR%Ops=)
   T6(Resp=Y%DF=N%W=0%ACK=O%Flags=R%Ops=)
   T7(Resp=Y%DF=N%W=0%ACK=S%Flags=AR%Ops=)
   PU(Resp=Y%DF=N%TOS=C0%IPLEN=164%RIPTL=148%RID=E%RIPCK=E%UCK=E%ULEN=134%DAT=E)
*/

id "linux-2.2";

tcp {
  incoming yes;
  outgoing no;
  max-window 65536;
}

tcp_isn {
  type random-inc 800000;
  initial-value 2600;
}

ip_id {
  type fixed-inc 1;
  initial-value random;
}

tcp_options {
  keep-unknown yes;
  keep-unused no;
  isolated-packets yes;
  timestamp-scale 100;
  code {
    if (flags(syn)) { 
      copy(mss);
      if (option(timestamp)) {
	if (option(sackOK)) {
	  copy(sackOK);
	  copy(timestamp);
	} else {
	  copy(nop);
	  copy(nop);
	  copy(timestamp);
	}
      } else
	if (option(sackOK)) {
	  copy(nop);
	  copy(nop);
	  copy(sackOK);
	}
      if (option(wscale)) {
	copy(nop);
	copy(wscale);
      }
    } else { 
      if (option(timestamp)) {
	copy(nop);
	copy(nop);
	copy(timestamp);
      }
      if (option(sack)) {
        copy(nop);
        copy(nop);
        copy(sack);
      }
    }
  }
}

tcp_decoy {
  code {
    if (option(mss)) { /* nmap has mss on all of its pkts */
      if (listen) {
	if (flags(syn&ece) || flags(syn&fin&urg&push)) { /* nmap test 1 or 3 */
	  set(df, 1);
	  set(win, 32595);
	  set(ack, this + 1);
	  set(flags, ack|syn);
	  insert(mss, this);
	  insert(timestamp);
	  copy(wscale);
	  reply;
	}
	if (flags(null)) /* nmap test 2 */
	  drop; 
	if (ack(0) && flags(ack) && !flags(syn|push|urg|rst)) { /* nmap test 4 */
	  set(df, 0);
	  set(win, 0);
	  set(ack, 2);
	  set(flags, rst);
	  reply;
	}
      } else {
	set(df, 0);
	set(win, 0);
	if (flags(syn) && !flags(ack)) { /* nmap test 5 */
	  set(ack, this + 1);
	  set(flags, ack|rst);
	  reply;
	}
	if (ack(0) && flags(ack) && !flags(syn|push|urg|rst)) { /* nmap test 6 */
	  set(ack, 2);
	  set(flags, rst);
	  reply;
	}
	if (flags(fin&push&urg)) { /* nmap test 7 */
	  set(ack, this);
	  set(flags, ack|rst);
	  reply;
	}
      }
    }
  }
}

udp_unreach {
  reply yes;
  df no;
  max-len 356;
  tos 192;
  
  mangle-original {
    ip-len 328;
    ip-id same;
    ip-csum same;
    udp-len 308;
    udp-csum same;
    udp-data same;
  }
}
