#!/usr/bin/env python

from twisted.protocols.telnet import *
from twisted.application import service,internet
from twisted.internet import protocol,defer,reactor,stdio
from shell import *
import sys,os


def loguj(arg):
    sys.stderr.write(arg)


from twisted.conch.telnet import TelnetTransport
class MyTelnetTransport(TelnetTransport):
    def connectionLost(self, reason):
        Transport.connectionLost(self, reason)
        os._exit(0);



class passwdDBFromFile:
    """
    Uwierzytelnia uzytkownikow zgodnie z wpisami w pliku
    """
    users = {} #przechowuje wpisy user haslo
    
    def __init__(self,path):
        file = open(path);
        users = file.readlines()
        file.close()

        for linia in users:
            user = linia.split();
            self.addUser(user[0], user[1])

    def checkPasswd(self,user,passwd):
        if not self.users.has_key(user):
            return False
        else:
            if self.users[user] == passwd:
                return True
            else: 
                return False

    def addUser(self,user,passwd):
        self.users[user] = passwd  


######################################
# This class realize out fake telnet #
######################################
class TelnetProtocol(Telnet):

    fakeShell = None
   
    def initShell(self):
        self.fakeShell = ShellSimulationProtocol(os.getpid()); 

    def checkUserAndPass(self,user,paswd):
        loguj("Telnet trying to log with username and passw: " + user +" "+paswd + "\r\n")
        if  usersDB.checkPasswd(user,paswd):
            self.initShell()
            self.write(self.fakeShell.returnPrompt())
            return True
        else:
            sys.stderr.write('warunek false\r\n')
            return False

    def processChunk(self, chunk):
        """I take a chunk of data and delegate out to telnet_* methods
        by way of processLine. If the current mode is 'Done', I'll close
        the connection. """
        self.buffer = self.buffer + chunk

        #yech.
        for delim in self.delimiters:
            idx = self.buffer.find(delim)
            if idx != -1:
                break

        while idx != -1:
            buf, self.buffer = self.buffer[:idx], self.buffer[idx+2:]
            self.processLine(buf)
            if self.mode == 'Done':
                self.transport.loseConnection()
                os._exit(0) 

            for delim in self.delimiters:
                idx = self.buffer.find(delim)
                if idx != -1:
                    break
 
    def welcomeMessage(self):
        return "Wellcome to my protected computer\r\n"

    def connectionMade(self):
        Telnet.connectionMade(self)


    def telnet_User(self, user):
        loguj("Telnet trying to log with username: " + user + "\r\n")
        self.username = user
        self.write(IAC+WILL+ECHO+"password: ")
        return "Password"

    def telnet_Command(self,cmd):
        data = self.fakeShell.executeCommand(cmd)
        self.write(data + self.fakeShell.returnPrompt())
        self.fakeShell.zeroCommand()
        return "Command"

    def dataReceived(self,data):
        Telnet.dataReceived(self,data)


class TelnetFactory(protocol.ServerFactory):
    protocol = TelnetProtocol
    def __init__(self, **kwargs): 
        self.users = kwargs

    def getUser(self, user):
        print "TelnetFactory.getUser"
        return defer.succeed(self.users.get(user, "No such user"))



################
##### MAIN #####
################

usersDB = passwdDBFromFile('services/SSHUsers')
factory = TelnetFactory()

setattr(factory, 'primes', '')
protocol = factory.buildProtocol('a');
protocol.transport = TelnetTransport() 


stdio.StandardIO(protocol);

reactor.run()
